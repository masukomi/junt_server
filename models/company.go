package models

import (
	"github.com/jinzhu/gorm"
	"time"
)

/*
Company
----------------
id:         int
name:       string
location:   string (optional)
url:        string (url optional)
note:       string (optional - markdown)
created_at: date_time (optional)
updated_at: date_time (optional)

has_many:   jobs (maybe)
has_many:   people (through applications)
*/

type Company struct {
	// gorm.Model
	// Id, CreatedAt, UpdatedAt would normally come from gorm.Model but we need to specify
	// the json keys for them so...
	Id        int64     `gorm:"PRIMARY_KEY";"AUTO_INCREMENT" json:"id"`          // generated by DB
	Name      string    `gorm:"index:co_names_idx" sql:"type:text;" json:"name"` // only required field
	Location  string    `sql:"type:text;" json:"location"`
	Url       string    `sql:"type:text;" json:"url"`
	Note      string    `sql:"type:text;" json:"note"` // markdown
	CreatedAt time.Time `json:"created_at"`            // generated if not supplied
	UpdatedAt time.Time `json:"updated_at"`            // generated if not supplied
	Db        gorm.DB   `gorm:"-"`                     // not persisted
}

func (c *Company) FindById(db gorm.DB, id int64) Company {
	var company Company
	err := db.First(&company, id)
	if err != nil {
		company.Db = db
	} // else ???? it's not an Error method it's a ...string?
	return company
}

func (c Company) save() bool {
	c.Db.Save(c)
	return true // or false
}

func (c *Company) GetAll(db gorm.DB) ([]Company, error) {
	var companies []Company
	err := db.Find(&companies).Error
	if err != nil {
		for i := 0; i < len(companies); i++ {
			companies[i].Db = db
		}
		return companies, nil
	} else {
		return nil, err
	}
}
